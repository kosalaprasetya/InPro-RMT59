// # Stations
// npx sequelize-cli model:generate --name Station --attributes stationName:string,stationCode:string,stationOperationalArea:string,stationRegion:string,stationClass:integer

// # Trains
// npx sequelize-cli model:generate --name Train --attributes trainNumber:string,trainName:string,from:string,to:string

// # TrainSchedules
// npx sequelize-cli model:generate --name TrainSchedule --attributes arrival:time,departure:time,isPassingOnly:boolean,isTerminus:boolean,stationId:integer,trainId:integer

// # Users
// npx sequelize-cli model:generate --name User --attributes fullName:string,email:string,password:string

//Migration untuk Stations
{
  ('use strict');
  module.exports = {
    up: async (queryInterface, Sequelize) => {
      await queryInterface.createTable('Stations', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        stationName: {
          type: Sequelize.STRING,
          allowNull: false, // station name cannot be empty
        },
        stationCode: {
          type: Sequelize.STRING,
          allowNull: false, // station code cannot be empty
          unique: true, // station code must be unique
        },
        stationOperationalArea: {
          type: Sequelize.STRING,
          allowNull: false, // station operational area cannot be empty
        },
        stationRegion: {
          type: Sequelize.STRING,
          allowNull: false, // station region cannot be empty
        },
        stationClass: {
          type: Sequelize.INTEGER,
          allowNull: true,
          defaultValue: 3,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
      });
    },
    down: async (queryInterface, Sequelize) => {
      await queryInterface.dropTable('Stations');
    },
  };
}
//Migration untuk Trains
{
  ('use strict');
  module.exports = {
    up: async (queryInterface, Sequelize) => {
      await queryInterface.createTable('Trains', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        trainNumber: {
          type: Sequelize.STRING,
          allowNull: false, // train number cannot be empty
        },
        trainName: {
          type: Sequelize.STRING,
          allowNull: false, // train name cannot be empty
        },
        from: {
          type: Sequelize.STRING,
          allowNull: false, // train origin cannot be empty
        },
        to: {
          type: Sequelize.STRING,
          allowNull: false, // train destination cannot be empty
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
      });
    },
    down: async (queryInterface, Sequelize) => {
      await queryInterface.dropTable('Trains');
    },
  };
}
//Migration untuk TrainSchedules
{
  ('use strict');
  module.exports = {
    up: async (queryInterface, Sequelize) => {
      await queryInterface.createTable('TrainSchedules', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        arrival: {
          type: Sequelize.TIME,
          allowNull: false, // Arrival time cannot be empty
        },
        departure: {
          type: Sequelize.TIME,
          allowNull: false, // Departure time cannot be empty
        },
        isPassingOnly: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        isTerminus: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        stationId: {
          type: Sequelize.INTEGER,
          allowNull: false, // Station ID cannot be empty
          references: {
            model: 'Stations',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        trainId: {
          type: Sequelize.INTEGER,
          allowNull: false, // Train ID cannot be empty
          references: {
            model: 'Trains',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
      });
    },
    down: async (queryInterface, Sequelize) => {
      await queryInterface.dropTable('TrainSchedules');
    },
  };
}
//Migration untuk Users
{
  ('use strict');
  module.exports = {
    up: async (queryInterface, Sequelize) => {
      await queryInterface.createTable('Users', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        fullName: {
          type: Sequelize.STRING,
        },
        email: {
          type: Sequelize.STRING,
          allowNull: false, // Email tidak boleh null
          unique: true, // Email harus unik
        },
        password: {
          type: Sequelize.STRING,
          allowNull: false, // Password tidak boleh null
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
      });
    },
    down: async (queryInterface, Sequelize) => {
      await queryInterface.dropTable('Users');
    },
  };
}

// Model untuk Stations
// File: models/stations.js
{
  ('use strict');
  module.exports = (sequelize, DataTypes) => {
    const Stations = sequelize.define(
      'Stations',
      {
        stationName: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'station name cannot be empty' },
            notEmpty: { msg: 'station name cannot be empty' },
          },
        },
        stationCode: {
          type: DataTypes.STRING,
          allowNull: false,
          unique: {
            args: true,
            msg: 'station code must be unique',
          },
          validate: {
            notNull: { msg: 'station code must be unique' },
            notEmpty: { msg: 'station code must be unique' },
          },
        },
        stationOperationalArea: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'station operational area cannot be empty' },
            notEmpty: { msg: 'station operational area cannot be empty' },
          },
        },
        stationRegion: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'station region cannot be empty' },
            notEmpty: { msg: 'station region cannot be empty' },
          },
        },
        stationClass: {
          type: DataTypes.INTEGER,
          defaultValue: 3,
        },
      },
      {}
    );
    Stations.associate = function (models) {
      // Stations memiliki banyak TrainSchedules
      Stations.hasMany(models.TrainSchedules, { foreignKey: 'stationId', as: 'schedules' });
    };
    return Stations;
  };
}

// Model untuk Trains
// File: models/trains.js
{
  ('use strict');
  module.exports = (sequelize, DataTypes) => {
    const Trains = sequelize.define(
      'Trains',
      {
        trainNumber: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'train number cannot be empty' },
            notEmpty: { msg: 'train number cannot be empty' },
          },
        },
        trainName: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'train name cannot be empty' },
            notEmpty: { msg: 'train name cannot be empty' },
          },
        },
        from: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'train origin cannot be empty' },
            notEmpty: { msg: 'train origin cannot be empty' },
          },
        },
        to: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notNull: { msg: 'train destination cannot be empty' },
            notEmpty: { msg: 'train destination cannot be empty' },
          },
        },
      },
      {}
    );
    Trains.associate = function (models) {
      // Trains memiliki banyak TrainSchedules
      Trains.hasMany(models.TrainSchedules, { foreignKey: 'trainId', as: 'schedules' });
    };
    return Trains;
  };
}

//Model untuk TrainSchedules
// File: models/trainschedules.js
{
  ('use strict');
  module.exports = (sequelize, DataTypes) => {
    const TrainSchedules = sequelize.define(
      'TrainSchedules',
      {
        arrival: {
          type: DataTypes.TIME,
          allowNull: false,
          validate: {
            notNull: { msg: 'Arrival time cannot be empty' },
            notEmpty: { msg: 'Arrival time cannot be empty' },
          },
        },
        departure: {
          type: DataTypes.TIME,
          allowNull: false,
          validate: {
            notNull: { msg: 'Departure time cannot be empty' },
            notEmpty: { msg: 'Departure time cannot be empty' },
          },
        },
        isPassingOnly: {
          type: DataTypes.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        isTerminus: {
          type: DataTypes.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        stationId: {
          type: DataTypes.INTEGER,
          allowNull: false,
          validate: {
            notNull: { msg: 'Station ID cannot be empty' },
            isInt: { msg: 'Station ID must be number' },
          },
        },
        trainId: {
          type: DataTypes.INTEGER,
          allowNull: false,
          validate: {
            notNull: { msg: 'Train ID cannot be empty' },
            isInt: { msg: 'Train ID must be number' },
          },
        },
      },
      {}
    );
    TrainSchedules.associate = function (models) {
      // TrainSchedules terhubung ke Trains dan Stations
      TrainSchedules.belongsTo(models.Trains, { foreignKey: 'trainId', as: 'train' });
      TrainSchedules.belongsTo(models.Stations, { foreignKey: 'stationId', as: 'station' });
    };
    return TrainSchedules;
  };
}

//Model untuk Users
// File: models/users.js
{
  ('use strict');
  module.exports = (sequelize, DataTypes) => {
    const Users = sequelize.define(
      'Users',
      {
        fullName: {
          type: DataTypes.STRING,
        },
        email: {
          type: DataTypes.STRING,
          allowNull: false, // Email tidak boleh null
          unique: {
            args: true,
            msg: 'Email address already in use!',
          },
          validate: {
            notNull: { msg: 'Email cannot be null' },
            notEmpty: { msg: 'Email cannot be empty' },
            isEmail: { msg: 'Must be a valid email address' },
          },
        },
        password: {
          type: DataTypes.STRING,
          allowNull: false, // Password tidak boleh null
          validate: {
            notNull: { msg: 'Password cannot be null' },
            notEmpty: { msg: 'Password cannot be empty' },
          },
        },
      },
      {}
    );

    // Jika nantinya ada association, dapat didefinisikan di sini.
    Users.associate = function (models) {
      // Contoh: Users.hasMany(models.Posts, { foreignKey: 'userId', as: 'posts' });
    };

    return Users;
  };
}
